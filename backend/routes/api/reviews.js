const express = require("express");
const router = express.Router();
const { Spot, Review, SpotImage, User, ReviewImage } = require("../../db/models");
const { where } = require("sequelize");
const { currentSpot } = require('./spots') ;

router.get("/current", async (req, res, next) => {
    const { user } = req;
    let userId = user.id;
    const result = await Review.findAll({
      where: {
        userId: userId
      }
    });
    if (!user) return res.json({"message": "no current user"})
    else if (!result) return res.json({"message": "no reviews found"}) 
    else return res.json(result);
  });

router.post('/:reviewId/images', async (req, res, next) => {
  let id = req.params.reviewId;
  let { url } = req.body;
  let review = await Review.findByPk(id)

  try {
    if (!review) throw new Error()
    let result = await ReviewImage.create({
      url,
      reviewId: id
    })
    
    return res.json(result)
  } catch (error) {
    if (!review) return res.json({"message": "Review couldn't be found"})
    else res.json({"message": "Maximum number of images for this resource was reached"})
  }


})

router.put('/:reviewId', async (req, res, next) => {
  let body = req.body
  let reviewId = req.params.reviewId
  let review = await Review.findByPk(reviewId)
  
  try {
    if(!review) throw new Error()
    if(!body) throw new Error()
    await review.update(body)
  
    return res.status(200).json(review)
    
  } catch (error) {
    if(!review) res.json({"message": "Review couldn't be found"})
    else res.json({
      "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
      "errors": {
        "review": "Review text is required",
        "stars": "Stars must be an integer from 1 to 5",
      }
    })
  }
})

router.delete('/:reviewId', async (req, res, next) => {
  let reviewId = req.params.reviewId
  let review = await Review.findByPk(reviewId)
  // let reviewImage = await ReviewImage.findOne({
  //   where: {
  //     reviewId: reviewId
  //   }
  // })
  try {
    if(!review) throw new Error()
    await review.destroy()
  
    res.json({"message": "Successfully deleted"})
    
  } catch (error) {
    return res.json({"message": "Review couldn't be found"})
  }
})

module.exports = router;